# Base docker-compose file for rancher in staging environment
# This file has some specific tweaks for staging environment
# You can copy this file and paste it when creating a new stack in rancher
# It will try to sync related files

# Rancher currently only supports up to version 2
# If you want to use docker-swarm, create another orchestration with version 3
version: "2"
# Common Django template for Geonode, Celery and Celerycam services below
volumes:
  postgis-data:
  db-backups:
  django-media:
  django-media-backups:
  django-static:
  django-reports:
  django-logs:
  nginx-logs:
  nginx-conf-data:
  geoserver-data-dir:

services:
  django:
    image: geonode/spcgeonode:django-3.0
    environment:
      # editable in .env
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - GEOSERVER_ADMIN_USER=${ADMIN_USERNAME}
      - GEOSERVER_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - REGISTRATION_OPEN=${REGISTRATION_OPEN}
      - TIME_ZONE=${TIME_ZONE}
      - ALLOWED_HOSTS=['nginx','127.0.0.1','localhost','$HTTPS_HOST','$HTTP_HOST']
      - SECRET_KEY=${SECRET_KEY}
      # data
      ## -- comment to disable postgis ingestion of uploaded shapefiles
      - DEFAULT_BACKEND_UPLOADER=geonode.importer
      - DEFAULT_BACKEND_DATASTORE=datastore
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
      # hardcoded
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=geonode.settings
      - BROKER_URL=amqp://rabbitmq:5672
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/uploaded/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - ASYNC_SIGNALS=True
      - SESSION_EXPIRED_CONTROL_ENABLED=False
      # TODO : we should probably remove this and set Celery to use JSON serialization instead of pickle
      - C_FORCE_ROOT=True
      # We get an exception after migrations on startup (it seems the monitoring app tries to resolve the geoserver domain name after it's migration, which can happen before oauth migrations on which geoserver startup depends...)
      - MONITORING_ENABLED=False
    volumes:
      - static:/spcgeonode-static/
      - media:/spcgeonode-media/
    restart: unless-stopped
    command: "uwsgi --chdir=/spcgeonode --module=geonode.wsgi --socket=:8000 --http=127.0.0.1:8001 --processes=5 --buffer-size=8192"

  # Celery worker that executes celery tasks created by Django.
  celery:
    image: geonode/spcgeonode:django-3.0
    environment:
      # editable in .env
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - GEOSERVER_ADMIN_USER=${ADMIN_USERNAME}
      - GEOSERVER_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - REGISTRATION_OPEN=${REGISTRATION_OPEN}
      - TIME_ZONE=${TIME_ZONE}
      - ALLOWED_HOSTS=['nginx','127.0.0.1','localhost','$HTTPS_HOST','$HTTP_HOST']
      - SECRET_KEY=${SECRET_KEY}
      # data
      ## -- comment to disable postgis ingestion of uploaded shapefiles
      - DEFAULT_BACKEND_UPLOADER=geonode.importer
      - DEFAULT_BACKEND_DATASTORE=datastore
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
      # hardcoded
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=geonode.settings
      - BROKER_URL=amqp://rabbitmq:5672
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/uploaded/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - ASYNC_SIGNALS=True
      - SESSION_EXPIRED_CONTROL_ENABLED=False
      # TODO : we should probably remove this and set Celery to use JSON serialization instead of pickle
      - C_FORCE_ROOT=True
      # We get an exception after migrations on startup (it seems the monitoring app tries to resolve the geoserver domain name after it's migration, which can happen before oauth migrations on which geoserver startup depends...)
      - MONITORING_ENABLED=False
    volumes:
      - static:/spcgeonode-static/
      - media:/spcgeonode-media/
    restart: unless-stopped
    entrypoint: []
    command: 'celery worker --app=geonode.celery_app:app -l info -E'

  # Celery beat that triggers scheduled tasks
  celerybeat:
    image: geonode/spcgeonode:django-3.0
    environment:
      # editable in .env
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - GEOSERVER_ADMIN_USER=${ADMIN_USERNAME}
      - GEOSERVER_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - REGISTRATION_OPEN=${REGISTRATION_OPEN}
      - TIME_ZONE=${TIME_ZONE}
      - ALLOWED_HOSTS=['nginx','127.0.0.1','localhost','$HTTPS_HOST','$HTTP_HOST']
      - SECRET_KEY=${SECRET_KEY}
      # data
      ## -- comment to disable postgis ingestion of uploaded shapefiles
      - DEFAULT_BACKEND_UPLOADER=geonode.importer
      - DEFAULT_BACKEND_DATASTORE=datastore
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
      # hardcoded
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=geonode.settings
      - BROKER_URL=amqp://rabbitmq:5672
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/uploaded/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - ASYNC_SIGNALS=True
      - SESSION_EXPIRED_CONTROL_ENABLED=False
      # TODO : we should probably remove this and set Celery to use JSON serialization instead of pickle
      - C_FORCE_ROOT=True
      # We get an exception after migrations on startup (it seems the monitoring app tries to resolve the geoserver domain name after it's migration, which can happen before oauth migrations on which geoserver startup depends...)
      - MONITORING_ENABLED=False
    volumes:
      - static:/spcgeonode-static/
      - media:/spcgeonode-media/
    restart: unless-stopped
    entrypoint: []
    command: 'celery beat --app=geonode.celery_app:app --pidfile="/celerybeat.pid" -l info'

  # Celery camera that monitors celery tasks and populate the djcelery django admin interface
  celerycam:
    image: geonode/spcgeonode:django-3.0
    environment:
      # editable in .env
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - GEOSERVER_ADMIN_USER=${ADMIN_USERNAME}
      - GEOSERVER_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - REGISTRATION_OPEN=${REGISTRATION_OPEN}
      - TIME_ZONE=${TIME_ZONE}
      - ALLOWED_HOSTS=['nginx','127.0.0.1','localhost','$HTTPS_HOST','$HTTP_HOST']
      - SECRET_KEY=${SECRET_KEY}
      # data
      ## -- comment to disable postgis ingestion of uploaded shapefiles
      - DEFAULT_BACKEND_UPLOADER=geonode.importer
      - DEFAULT_BACKEND_DATASTORE=datastore
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
      # hardcoded
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=geonode.settings
      - BROKER_URL=amqp://rabbitmq:5672
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/uploaded/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - ASYNC_SIGNALS=True
      - SESSION_EXPIRED_CONTROL_ENABLED=False
      # TODO : we should probably remove this and set Celery to use JSON serialization instead of pickle
      - C_FORCE_ROOT=True
      # We get an exception after migrations on startup (it seems the monitoring app tries to resolve the geoserver domain name after it's migration, which can happen before oauth migrations on which geoserver startup depends...)
      - MONITORING_ENABLED=False
    volumes:
      - static:/spcgeonode-static/
      - media:/spcgeonode-media/
    restart: unless-stopped
    entrypoint: []
    command: 'celery events --app=geonode.celery_app:app --pidfile="/celeryev.pid" --camera=django_celery_monitor.camera.Camera --frequency=2.0 -l info'

  # Nginx is serving django static and media files and proxies to django and geonode
  nginx:
    image: geonode/spcgeonode:nginx-3.0
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_PORT=${HTTP_PORT}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - static:/spcgeonode-static/
      - media:/spcgeonode-media/
      - certificates:/spcgeonode-certificates/
    restart: unless-stopped

  # Geoserver backend
  geoserver:
    image: geonode/spcgeonode:geoserver-3.0
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    volumes:
      - geodatadir:/spcgeonode-geodatadir/
    restart: unless-stopped

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: geonode/spcgeonode:letsencrypt-3.0
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
    volumes:
      - certificates:/spcgeonode-certificates/
    restart: on-failure

  # dumps the non geodata db
  pgdumper-nogeo:
    container_name: dumper_${GEONODE_DATABASE}_${COMPOSE_PROJECT_NAME}
    image: geonode/spcgeonode:pgdumper-3.0
    volumes:
      - pgdumps:/spcgeonode-pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${GEONODE_DATABASE}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}

  # dumps the geodata db
  pgdumper-geo:
    container_name: dumper_${GEONODE_GEODATABASE}_${COMPOSE_PROJECT_NAME}
    image: geonode/spcgeonode:pgdumper-3.0
    volumes:
      - pgdumps:/spcgeonode-pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${GEONODE_GEODATABASE}
      # pgdumper needs postgres:// as connection string for the geodatabase
      - DATABASE_URL=postgres://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}

  rclone:
    image: geonode/spcgeonode:rclone-3.0
    environment:
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - pgdumps:/spcgeonode-pgdumps/
      - media:/spcgeonode-media/
      - geodatadir:/spcgeonode-geodatadir/
    restart: on-failure

  # PostGIS database.
  postgres:
    # use geonode official postgis 10 image
    image: geonode/postgis:10
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    volumes:
      - database:/var/lib/postgresql/data/
    restart: unless-stopped
    # uncomment to enable remote connections to postgres
    #ports:
    #  - "5432:5432"

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped

